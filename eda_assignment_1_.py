# -*- coding: utf-8 -*-
"""EDA Assignment 1 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_9-Pfhngt4MnA5EAdpCk0GZYE4a-v56G

# **Umm E Salma**

# *EDA Assignment # 1*

**Q.1)** Import essential libraries for data analysis,
"""

import pandas as pd #For data manipulation and analysis
import numpy as np #  For numerical operation and handlings arrays

"""**Notes**
* **Pandas :** For data manipulation and analysis
* **numpy :** For numerical operation and handlings arrays
"""

from google.colab import drive
drive.mount('/content/drive')

""" **Q.2)** Load the Airbnb dataset from a CSV file into a pandas DataFrame"""

dm = pd.read_csv('Airbnb (1).csv') #Read CSV file which store with variable dm
dm

"""**Q.3)** Print the first 20 rows of the dataset to get an initial understanding of its structure and content.

**Notes:**
* **head():** To get initial look on data and for dispaly required rows
"""

dm.head(20) #To get initial look on data and for dispaly required rows

"""**Q.4)** Find out the shape of dataset and what does it indicate?

**Note:**

* **shape() Function:** It is help to understand size of data set
"""

dm.shape

"""**(Q.5)** Check the data types of each attribute to understand what type of data each column holds

**Note:**

* **dtypes() Function:** It's use to check datatype of each column

**If we Consider Alternative**
* **.info() Function**: Also use to get datatypes ,non-null counts , identify missing values and information about memory usage
"""

dm.dtypes

"""**Q.6)** Provide summary statistics for numerical columns. Highlight any unusual calculation you find (If any)"""

dm.describe()

"""**Note:**
* **dm.describe() function:** It is used to generate descriptive statistics for numerical columns in a DataFrame. It provides a quick overview of the distribution and spread of the data.

**What describe() Shows (for Numerical Columns):**
* **count:** Number of non-missing values.
* **mean:** The average of the data
* **std:** Standard deviation, showing the spread of the data.
* **min:** The smallest value in the column.
* **25%:** First quartile (Q1) value.
* **50%:** Median (Q2) value.
* **75%:** Third quartile (Q3) value.
* **max:** The largest value in the column

**Q.10)** Provide summary statistics for categorical columnsHighlight any unusual calculation you find (If any)
"""

dm[['name', 'host_name', 'neighbourhood group',
    'neighbourhood', 'room type', 'last review']].describe(include=['object'])

"""**Notes:**
It generates a summary of descriptive statistics for the selected categorical (object-type) columns in the DataFrame.

* **dm.describe(include='all'): To include all data types.**

* The **include=['object']** ensures that only object-type **(string or categorical)** columns are included

**Q.7)** Identify duplicate rows in the dataset and remove them to ensure data integrity.
"""

dm.duplicated().sum() # Check Duplications

dm.drop_duplicates(inplace=True)

dm.duplicated().sum()

"""#**Notes:**

## **Duplicatation**
* **dm.duplicated().sum():** To quickly identify how many duplicate rows exist in the dataset.

* **dm.drop_duplicates() **: Help to remove Duplication rows from dataset

But if we implies its by default it can drop duplicate data but duplication can't update in dataset

For that we have to implies

   * **inplace=True** to update dataframe after removing data

**Q.8:** Check Each Column for Null Values

**Notes:**
**dm.isnull().sum()** : Checks for missing values in each column of the DataFrame and returns the **total count of NaN (null)** values per column as **.sum()** implies
"""

dm.isnull().sum()

"""**Q.9)** Replace null values in columns with suitable replacements"""

dm['name'].fillna('Unknown', inplace=True)
# For 'last review', replacing NaN with 'No Review'
dm['host_name'].fillna('Unknown', inplace=True)
# For 'reviews_per_month', replacing NaN with 0"
dm['reviews_per_month'].fillna(0, inplace=True)
# For 'last review', replacing NaN with 'No Review'
dm['last review'].fillna('No Review', inplace=True)

"""**Notes:**

**fillna()** in pandas is used to fill missing (NaN) values in a DataFrame or Series with a specified value.

**For example:**
* dm['column'].fillna(0) → Replaces missing values with 0.
* dm['column'].fillna('Unknown') → Replaces missing values with 'Unknown'
"""

dm.isnull().any()

"""**Notes:**

* **dm.isnull().any()** checks each column in the DataFrame dm to see if it contains any missing (NaN) values.

**It returns a Boolean value (True or False) for each column.**
* True means the column has at least one missing value
* False means there are no missing values in that column.

So, here **missing values in column name, host_name, last review and reviews per month** is sucessfully replace and found no null values in given column

**Q.10)** Drop columns (last reviews, names and id)
"""

dm.drop(['last review', 'name', 'id'], axis=1, inplace=True)

"""**NOTES:**

**dm.drop():** Removes specified elements from the DataFrame.

**['last review', 'name', 'id']:** Specifies the columns to be removed.

**axis=1:** Indicates that **columns (not rows) are to be dropped.**

**inplace=True:** Applies the change directly to the DataFrame without needing to assign it to a new variable.
"""

dm.columns

"""**Note:**

**.columns** in pandas returns all the column names of a DataFrame.

 It's useful for:

* **Viewing Column Names:**Quickly see all columns.
* **Renaming Columns:** Assign new column names.
* **Looping:** Iterate over columns.
* **Checking Existence:** Verify if a column exists

**Q.11)** Find number of unique values for the columns ‘room type’, 'neighbourhood_group' and 'neighbourhood'.
Highlight the unusual answer if any and tackle with it.

**Note:**

* **.nunique() function**: In pandas returns the count of unique values for each specified column.
"""

dm[['room type', 'neighbourhood group', 'neighbourhood']].nunique()

"""# **room type**"""

# Find any unusual values in 'room type' column
dm[dm['room type'].str.contains(r'[^a-zA-Z\s]', regex=True)]['room type'].unique()

# Clean the 'room type' column: strip spaces and handle unusual values
dm['room type'] = dm['room type'].str.strip().replace({'Entire home/apt': 'Entire home/apt'})

dm['room type'].unique()

"""# **neighbourhood group**"""

# Find any unusual values in 'neighbourhood_group' column
dm[dm['neighbourhood group'].str.contains(r'[^a-zA-Z\s]', regex=True)]['neighbourhood group'].unique()

dm['neighbourhood group'].unique()

dm['neighbourhood group'] = dm['neighbourhood group'].replace('Broklyn', 'Brooklyn')

dm['neighbourhood group'].unique()

"""# **neighbourhood**"""

# Find any unusual values in 'neighbourhood' column
dm[dm['neighbourhood'].str.contains(r'[^a-zA-Z\s]', regex=True)]['neighbourhood'].unique()

dm['neighbourhood group'].unique()

# Replace apostrophes and other unwanted characters
dm['neighbourhood'].str.replace(r"[^a-zA-Z\s\-]", "", regex=True)

dm['neighbourhood'].str.strip() # remove white space

dm['neighbourhood'].unique()

# Normalize case, remove leading/trailing spaces, and handle special characters
dm['neighbourhood'].str.strip().str.lower().str.replace(r"[^\w\s\-']", "", regex=True)